name: CI/CD

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  # 1. Build & Test (CI)
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      api_changed: ${{ steps.filter.outputs.api }}
      web_changed: ${{ steps.filter.outputs.web }}
      migrations_changed: ${{ steps.filter.outputs.migrations }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # --- 変更ファイルのフィルタリング ---
      - name: Filter changed paths
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            api:
              - 'apps/api/**'
            web:
              - 'apps/web/**'
            migrations:
              - 'apps/api/drizzle/**'

      - name: Install pnpm
        run: npm install -g pnpm
  
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Format & Lint
        run: |
          pnpm format
          pnpm lint

      # --- APIのテスト ---
      - name: Run API Tests
        if: steps.filter.outputs.api == 'true'
        working-directory: apps/api
        run: pnpm test:coverage

      # --- Webのテスト ---
      - name: Run Web Tests
        if: steps.filter.outputs.web == 'true'
        working-directory: apps/web
        run: pnpm test:coverage

      # --- Codecov へのアップロード（API）---
      - name: Upload API coverage to Codecov
        if: steps.filter.outputs.api == 'true'
        uses: codecov/codecov-action@v4
        with:
          files: apps/api/coverage/lcov.info
          flags: api
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      # --- Codecov へのアップロード（Web）---
      - name: Upload Web coverage to Codecov
        if: steps.filter.outputs.web == 'true'
        uses: codecov/codecov-action@v4
        with:
          files: apps/web/coverage/lcov.info
          flags: web
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Build API
        if: steps.filter.outputs.api == 'true' || steps.filter.outputs.web == 'true'
        working-directory: apps/api
        run: pnpm run build

      - name: Build Web
        if: steps.filter.outputs.web == 'true'
        working-directory: apps/web
        run: pnpm run build

  # 2. Workers (Hono API) のデプロイ
  deploy-api:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: >
      github.event_name == 'push' &&
      needs.build-and-test.outputs.api_changed == 'true'
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install pnpm
        run: npm install -g pnpm
  
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install wrangler
        run: npm install -g wrangler@latest

      - name: Build API
        working-directory: apps/api
        run: pnpm run build

      - name: Publish to Cloudflare Workers
        working-directory: apps/api
        run: pnpm run deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  # 3. D1マイグレーション
  apply-d1-migrations:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: >
      github.event_name == 'push' &&
      needs.build-and-test.outputs.migrations_changed == 'true'
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install wrangler
        run: npm install -g wrangler@latest

      - name: Apply D1 migrations
        working-directory: apps/api
        run: wrangler d1 migrations apply gyulist --remote
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  # 4. Cloudflare Pages のデプロイ
  deploy-web:
    runs-on: ubuntu-latest
    needs: build-and-test
    environment: production
    if: >
      github.event_name == 'push' &&
      needs.build-and-test.outputs.web_changed == 'true'
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install wrangler
        run: npm install -g wrangler@latest

      - name: Install pnpm
        run: npm install -g pnpm
  
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build API
        working-directory: apps/api
        run: pnpm run build

      - name: Deploy to Cloudflare Pages
        working-directory: apps/web
        run: pnpm run deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          NEXT_PUBLIC_API_URL: ${{ vars.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_TURNSTILE_SITE_KEY: ${{ vars.NEXT_PUBLIC_TURNSTILE_SITE_KEY }}

  # 5. E2Eテスト（ある程度プロダクトが完成したら実施する）
  # e2e-tests:
  #   runs-on: ubuntu-latest
  #   needs: build-and-test
  #   if: >
  #     github.event_name == 'pull_request' &&
  #     needs.build-and-test.outputs.web_changed == 'true'
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v3

  #     - name: Setup Node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '20'

  #     - name: Install pnpm
  #       run: npm install -g pnpm

  #     - name: Install dependencies
  #       run: pnpm install --frozen-lockfile

  #     - name: Install Playwright Browsers
  #       working-directory: apps/web
  #       run: pnpm exec playwright install --with-deps

  #     - name: Build API
  #       working-directory: apps/api
  #       run: pnpm run build

  #     - name: Build Web
  #       working-directory: apps/web
  #       run: pnpm run build

  #     - name: Setup test data
  #       working-directory: apps/api
  #       run: |
  #         pnpm migrate:local
  #         pnpm create-dummy-data:local

  #     - name: Run Playwright tests
  #       working-directory: apps/web
  #       run: pnpm e2e

  #     - name: Upload Playwright Report
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: playwright-report
  #         path: apps/web/playwright-report/
  #         retention-days: 30
